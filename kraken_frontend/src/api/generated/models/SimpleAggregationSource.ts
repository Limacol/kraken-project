/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Numbers how many attacks of a certain kind found an aggregated model
 * @export
 * @interface SimpleAggregationSource
 */
export interface SimpleAggregationSource {
    /**
     * Bruteforce subdomains via DNS requests
     * @type {number}
     * @memberof SimpleAggregationSource
     */
    bruteforceSubdomains?: number;
    /**
     * Scan tcp ports
     * @type {number}
     * @memberof SimpleAggregationSource
     */
    tcpPortScan?: number;
    /**
     * Query certificate transparency
     * @type {number}
     * @memberof SimpleAggregationSource
     */
    queryCertificateTransparency?: number;
    /**
     * Query the dehashed API
     * @type {number}
     * @memberof SimpleAggregationSource
     */
    queryDehashed?: number;
    /**
     * Check if a host is reachable via icmp
     * @type {number}
     * @memberof SimpleAggregationSource
     */
    hostAlive?: number;
    /**
     * Detect the service that is running on a port
     * @type {number}
     * @memberof SimpleAggregationSource
     */
    serviceDetection?: number;
    /**
     * Resolve domain names
     * @type {number}
     * @memberof SimpleAggregationSource
     */
    dnsResolution?: number;
}

/**
 * Check if a given object implements the SimpleAggregationSource interface.
 */
export function instanceOfSimpleAggregationSource(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SimpleAggregationSourceFromJSON(json: any): SimpleAggregationSource {
    return SimpleAggregationSourceFromJSONTyped(json, false);
}

export function SimpleAggregationSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimpleAggregationSource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bruteforceSubdomains': !exists(json, 'bruteforce_subdomains') ? undefined : json['bruteforce_subdomains'],
        'tcpPortScan': !exists(json, 'tcp_port_scan') ? undefined : json['tcp_port_scan'],
        'queryCertificateTransparency': !exists(json, 'query_certificate_transparency') ? undefined : json['query_certificate_transparency'],
        'queryDehashed': !exists(json, 'query_dehashed') ? undefined : json['query_dehashed'],
        'hostAlive': !exists(json, 'host_alive') ? undefined : json['host_alive'],
        'serviceDetection': !exists(json, 'service_detection') ? undefined : json['service_detection'],
        'dnsResolution': !exists(json, 'dns_resolution') ? undefined : json['dns_resolution'],
    };
}

export function SimpleAggregationSourceToJSON(value?: SimpleAggregationSource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bruteforce_subdomains': value.bruteforceSubdomains,
        'tcp_port_scan': value.tcpPortScan,
        'query_certificate_transparency': value.queryCertificateTransparency,
        'query_dehashed': value.queryDehashed,
        'host_alive': value.hostAlive,
        'service_detection': value.serviceDetection,
        'dns_resolution': value.dnsResolution,
    };
}

