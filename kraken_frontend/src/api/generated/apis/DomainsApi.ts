/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  CreateDomainRequest,
  DomainResultsPage,
  FullDomain,
  UpdateDomainRequest,
  UuidResponse,
} from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    CreateDomainRequestFromJSON,
    CreateDomainRequestToJSON,
    DomainResultsPageFromJSON,
    DomainResultsPageToJSON,
    FullDomainFromJSON,
    FullDomainToJSON,
    UpdateDomainRequestFromJSON,
    UpdateDomainRequestToJSON,
    UuidResponseFromJSON,
    UuidResponseToJSON,
} from '../models';

export interface CreateDomainOperationRequest {
    uuid: string;
    createDomainRequest: CreateDomainRequest;
}

export interface GetAllDomainsRequest {
    uuid: string;
    limit: number;
    offset: number;
    host?: string | null;
}

export interface GetDomainRequest {
    wUuid: string;
    dUuid: string;
}

export interface UpdateDomainOperationRequest {
    wUuid: string;
    dUuid: string;
    updateDomainRequest: UpdateDomainRequest;
}

/**
 * 
 */
export class DomainsApi extends runtime.BaseAPI {

    /**
     * Manually add a domain
     * Manually add a domain
     */
    async createDomainRaw(requestParameters: CreateDomainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidResponse>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling createDomain.');
        }

        if (requestParameters.createDomainRequest === null || requestParameters.createDomainRequest === undefined) {
            throw new runtime.RequiredError('createDomainRequest','Required parameter requestParameters.createDomainRequest was null or undefined when calling createDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/workspaces/{uuid}/domains`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDomainRequestToJSON(requestParameters.createDomainRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UuidResponseFromJSON(jsonValue));
    }

    /**
     * Manually add a domain
     * Manually add a domain
     */
    async createDomain(requestParameters: CreateDomainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidResponse> {
        const response = await this.createDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all domains of a specific workspace
     * Retrieve all domains of a specific workspace
     */
    async getAllDomainsRaw(requestParameters: GetAllDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getAllDomains.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getAllDomains.');
        }

        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getAllDomains.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.host !== undefined) {
            queryParameters['host'] = requestParameters.host;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/workspaces/{uuid}/domains`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainResultsPageFromJSON(jsonValue));
    }

    /**
     * Retrieve all domains of a specific workspace
     * Retrieve all domains of a specific workspace
     */
    async getAllDomains(requestParameters: GetAllDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainResultsPage> {
        const response = await this.getAllDomainsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all information about a single domain
     * Retrieve all information about a single domain
     */
    async getDomainRaw(requestParameters: GetDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullDomain>> {
        if (requestParameters.wUuid === null || requestParameters.wUuid === undefined) {
            throw new runtime.RequiredError('wUuid','Required parameter requestParameters.wUuid was null or undefined when calling getDomain.');
        }

        if (requestParameters.dUuid === null || requestParameters.dUuid === undefined) {
            throw new runtime.RequiredError('dUuid','Required parameter requestParameters.dUuid was null or undefined when calling getDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/workspaces/{w_uuid}/domains/{d_uuid}`.replace(`{${"w_uuid"}}`, encodeURIComponent(String(requestParameters.wUuid))).replace(`{${"d_uuid"}}`, encodeURIComponent(String(requestParameters.dUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullDomainFromJSON(jsonValue));
    }

    /**
     * Retrieve all information about a single domain
     * Retrieve all information about a single domain
     */
    async getDomain(requestParameters: GetDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullDomain> {
        const response = await this.getDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a domain  You must include at least on parameter
     * Update a domain
     */
    async updateDomainRaw(requestParameters: UpdateDomainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.wUuid === null || requestParameters.wUuid === undefined) {
            throw new runtime.RequiredError('wUuid','Required parameter requestParameters.wUuid was null or undefined when calling updateDomain.');
        }

        if (requestParameters.dUuid === null || requestParameters.dUuid === undefined) {
            throw new runtime.RequiredError('dUuid','Required parameter requestParameters.dUuid was null or undefined when calling updateDomain.');
        }

        if (requestParameters.updateDomainRequest === null || requestParameters.updateDomainRequest === undefined) {
            throw new runtime.RequiredError('updateDomainRequest','Required parameter requestParameters.updateDomainRequest was null or undefined when calling updateDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/workspaces/{w_uuid}/domains/{d_uuid}`.replace(`{${"w_uuid"}}`, encodeURIComponent(String(requestParameters.wUuid))).replace(`{${"d_uuid"}}`, encodeURIComponent(String(requestParameters.dUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDomainRequestToJSON(requestParameters.updateDomainRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a domain  You must include at least on parameter
     * Update a domain
     */
    async updateDomain(requestParameters: UpdateDomainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateDomainRaw(requestParameters, initOverrides);
    }

}
