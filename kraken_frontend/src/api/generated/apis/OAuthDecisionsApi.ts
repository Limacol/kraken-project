/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  GetMyDecisionsResponse,
} from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    GetMyDecisionsResponseFromJSON,
    GetMyDecisionsResponseToJSON,
} from '../models';

export interface RevokeDecisionRequest {
    uuid: string;
}

/**
 * 
 */
export class OAuthDecisionsApi extends runtime.BaseAPI {

    /**
     * Retrieve a user\'s remembered oauth decisions
     * Retrieve a user\'s remembered oauth decisions
     */
    async getDecisionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMyDecisionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/oauthDecisions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMyDecisionsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a user\'s remembered oauth decisions
     * Retrieve a user\'s remembered oauth decisions
     */
    async getDecisions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMyDecisionsResponse> {
        const response = await this.getDecisionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Revoke a user\'s remembered oauth decision
     * Revoke a user\'s remembered oauth decision
     */
    async revokeDecisionRaw(requestParameters: RevokeDecisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling revokeDecision.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/oauthDecisions/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revoke a user\'s remembered oauth decision
     * Revoke a user\'s remembered oauth decision
     */
    async revokeDecision(requestParameters: RevokeDecisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeDecisionRaw(requestParameters, initOverrides);
    }

}
