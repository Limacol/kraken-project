# coding: utf-8

"""
    kraken

    The core component of kraken-project

    The version of the OpenAPI document: 0.1.0
    Contact: git@omikron.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from kraken_sdk.models.search_result_entry import SearchResultEntry

class TestSearchResultEntry(unittest.TestCase):
    """SearchResultEntry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchResultEntry:
        """Test SearchResultEntry
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchResultEntry`
        """
        model = SearchResultEntry()
        if include_optional:
            return SearchResultEntry(
                host_entry = kraken_sdk.models.simple_host.SimpleHost(
                    uuid = '', 
                    ip_addr = '172.0.0.1', 
                    os_type = 'Unknown', 
                    comment = '', 
                    workspace = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                service_entry = kraken_sdk.models.simple_service.SimpleService(
                    uuid = '', 
                    name = 'postgresql', 
                    version = '13.0.1', 
                    host = '', 
                    port = '', 
                    comment = 'Holds all relevant information', 
                    workspace = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                port_entry = kraken_sdk.models.simple_port.SimplePort(
                    uuid = '', 
                    port = 1337, 
                    protocol = 'Unknown', 
                    host = '', 
                    comment = '', 
                    workspace = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                domain_entry = kraken_sdk.models.simple_domain.SimpleDomain(
                    uuid = '', 
                    domain = 'example.com', 
                    comment = 'This is a important domain!', 
                    workspace = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                dns_record_result_entry = kraken_sdk.models.simple_dns_resolution_result.SimpleDnsResolutionResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    source = '', 
                    destination = '', 
                    dns_record_type = 'A', ),
                tcp_port_scan_result_entry = kraken_sdk.models.simple_tcp_port_scan_result.SimpleTcpPortScanResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    address = '127.0.0.1', 
                    port = 0, ),
                dehashed_query_result_entry = kraken_sdk.models.simple_query_unhashed_result.SimpleQueryUnhashedResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    dehashed_id = 56, 
                    email = '', 
                    username = '', 
                    password = '', 
                    hashed_password = '', 
                    ip_address = '127.0.0.1', 
                    name = '', 
                    vin = '', 
                    address = '', 
                    phone = '', 
                    database_name = '', ),
                certificate_transparency_result_entry = kraken_sdk.models.full_query_certificate_transparency_result.FullQueryCertificateTransparencyResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    issuer_name = '', 
                    common_name = '', 
                    value_names = [
                        ''
                        ], 
                    not_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    not_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    serial_number = '', ),
                host_alive_result = kraken_sdk.models.simple_host_alive_result.SimpleHostAliveResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    host = '127.0.0.1', ),
                service_detection_result = kraken_sdk.models.full_service_detection_result.FullServiceDetectionResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    certainty = 'Historical', 
                    service_names = [
                        ''
                        ], 
                    host = '127.0.0.1', 
                    port = 56, )
            )
        else:
            return SearchResultEntry(
                host_entry = kraken_sdk.models.simple_host.SimpleHost(
                    uuid = '', 
                    ip_addr = '172.0.0.1', 
                    os_type = 'Unknown', 
                    comment = '', 
                    workspace = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                service_entry = kraken_sdk.models.simple_service.SimpleService(
                    uuid = '', 
                    name = 'postgresql', 
                    version = '13.0.1', 
                    host = '', 
                    port = '', 
                    comment = 'Holds all relevant information', 
                    workspace = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                port_entry = kraken_sdk.models.simple_port.SimplePort(
                    uuid = '', 
                    port = 1337, 
                    protocol = 'Unknown', 
                    host = '', 
                    comment = '', 
                    workspace = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                domain_entry = kraken_sdk.models.simple_domain.SimpleDomain(
                    uuid = '', 
                    domain = 'example.com', 
                    comment = 'This is a important domain!', 
                    workspace = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                dns_record_result_entry = kraken_sdk.models.simple_dns_resolution_result.SimpleDnsResolutionResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    source = '', 
                    destination = '', 
                    dns_record_type = 'A', ),
                tcp_port_scan_result_entry = kraken_sdk.models.simple_tcp_port_scan_result.SimpleTcpPortScanResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    address = '127.0.0.1', 
                    port = 0, ),
                dehashed_query_result_entry = kraken_sdk.models.simple_query_unhashed_result.SimpleQueryUnhashedResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    dehashed_id = 56, 
                    email = '', 
                    username = '', 
                    password = '', 
                    hashed_password = '', 
                    ip_address = '127.0.0.1', 
                    name = '', 
                    vin = '', 
                    address = '', 
                    phone = '', 
                    database_name = '', ),
                certificate_transparency_result_entry = kraken_sdk.models.full_query_certificate_transparency_result.FullQueryCertificateTransparencyResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    issuer_name = '', 
                    common_name = '', 
                    value_names = [
                        ''
                        ], 
                    not_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    not_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    serial_number = '', ),
                host_alive_result = kraken_sdk.models.simple_host_alive_result.SimpleHostAliveResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    host = '127.0.0.1', ),
                service_detection_result = kraken_sdk.models.full_service_detection_result.FullServiceDetectionResult(
                    uuid = '', 
                    attack = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    certainty = 'Historical', 
                    service_names = [
                        ''
                        ], 
                    host = '127.0.0.1', 
                    port = 56, ),
        )
        """

    def testSearchResultEntry(self):
        """Test SearchResultEntry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
