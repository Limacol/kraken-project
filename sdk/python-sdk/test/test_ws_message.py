# coding: utf-8

"""
    kraken

    The core component of kraken-project

    The version of the OpenAPI document: 0.1.0
    Contact: git@omikron.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from kraken_sdk.models.ws_message import WsMessage

class TestWsMessage(unittest.TestCase):
    """WsMessage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WsMessage:
        """Test WsMessage
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WsMessage`
        """
        model = WsMessage()
        if include_optional:
            return WsMessage(
                type = 'InvalidMessage',
                invitation_uuid = '',
                workspace = kraken_sdk.models.simple_workspace.SimpleWorkspace(
                    uuid = '', 
                    name = 'ultra-secure-workspace', 
                    description = 'This workspace is ultra secure and should not be looked at!!', 
                    owner = kraken_sdk.models.simple_user.SimpleUser(
                        uuid = '', 
                        username = '', 
                        display_name = '', ), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                var_from = kraken_sdk.models.simple_user.SimpleUser(
                    uuid = '', 
                    username = '', 
                    display_name = '', ),
                attack_uuid = '',
                finished_successful = True,
                search_uuid = '',
                result_uuid = '',
                source = '',
                destination = '',
                host = '',
                address = '',
                port = 0,
                entries = [
                    kraken_sdk.models.certificate_transparency_entry.CertificateTransparencyEntry(
                        serial_number = '', 
                        issuer_name = '', 
                        common_name = '', 
                        value_names = [
                            ''
                            ], 
                        not_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        not_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                service = ''
            )
        else:
            return WsMessage(
                type = 'InvalidMessage',
                invitation_uuid = '',
                workspace = kraken_sdk.models.simple_workspace.SimpleWorkspace(
                    uuid = '', 
                    name = 'ultra-secure-workspace', 
                    description = 'This workspace is ultra secure and should not be looked at!!', 
                    owner = kraken_sdk.models.simple_user.SimpleUser(
                        uuid = '', 
                        username = '', 
                        display_name = '', ), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                var_from = kraken_sdk.models.simple_user.SimpleUser(
                    uuid = '', 
                    username = '', 
                    display_name = '', ),
                attack_uuid = '',
                finished_successful = True,
                search_uuid = '',
                result_uuid = '',
                source = '',
                destination = '',
                host = '',
                address = '',
                port = 0,
                entries = [
                    kraken_sdk.models.certificate_transparency_entry.CertificateTransparencyEntry(
                        serial_number = '', 
                        issuer_name = '', 
                        common_name = '', 
                        value_names = [
                            ''
                            ], 
                        not_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        not_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                service = '',
        )
        """

    def testWsMessage(self):
        """Test WsMessage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
