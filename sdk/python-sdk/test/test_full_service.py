# coding: utf-8

"""
    kraken

    The core component of kraken-project

    The version of the OpenAPI document: 0.1.0
    Contact: git@omikron.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from kraken_sdk.models.full_service import FullService

class TestFullService(unittest.TestCase):
    """FullService unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FullService:
        """Test FullService
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FullService`
        """
        model = FullService()
        if include_optional:
            return FullService(
                uuid = '',
                name = 'postgresql',
                version = '13.0.1',
                certainty = 'Historical',
                host = kraken_sdk.models.simple_host.SimpleHost(
                    uuid = '', 
                    ip_addr = '172.0.0.1', 
                    os_type = 'Unknown', 
                    comment = '', 
                    workspace = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                port = kraken_sdk.models.simple_port.SimplePort(
                    uuid = '', 
                    port = 1337, 
                    protocol = 'Unknown', 
                    host = '', 
                    comment = '', 
                    workspace = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                comment = 'Holds all relevant information',
                workspace = '',
                tags = [
                    kraken_sdk.models.simple_tag.SimpleTag(
                        uuid = '', 
                        name = '', 
                        color = kraken_sdk.models.color.Color(
                            r = 0, 
                            g = 0, 
                            b = 0, 
                            a = 0, ), 
                        tag_type = 'Workspace', )
                    ],
                sources = kraken_sdk.models.simple_aggregation_source.SimpleAggregationSource(
                    bruteforce_subdomains = 0, 
                    tcp_port_scan = 0, 
                    query_certificate_transparency = 0, 
                    query_dehashed = 0, 
                    host_alive = 0, 
                    service_detection = 0, 
                    dns_resolution = 0, 
                    manual = True, ),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return FullService(
                uuid = '',
                name = 'postgresql',
                certainty = 'Historical',
                host = kraken_sdk.models.simple_host.SimpleHost(
                    uuid = '', 
                    ip_addr = '172.0.0.1', 
                    os_type = 'Unknown', 
                    comment = '', 
                    workspace = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                comment = 'Holds all relevant information',
                workspace = '',
                tags = [
                    kraken_sdk.models.simple_tag.SimpleTag(
                        uuid = '', 
                        name = '', 
                        color = kraken_sdk.models.color.Color(
                            r = 0, 
                            g = 0, 
                            b = 0, 
                            a = 0, ), 
                        tag_type = 'Workspace', )
                    ],
                sources = kraken_sdk.models.simple_aggregation_source.SimpleAggregationSource(
                    bruteforce_subdomains = 0, 
                    tcp_port_scan = 0, 
                    query_certificate_transparency = 0, 
                    query_dehashed = 0, 
                    host_alive = 0, 
                    service_detection = 0, 
                    dns_resolution = 0, 
                    manual = True, ),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testFullService(self):
        """Test FullService"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
