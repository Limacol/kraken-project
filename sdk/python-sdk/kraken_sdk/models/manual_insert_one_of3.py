# coding: utf-8

"""
    kraken

    The core component of kraken-project

    The version of the OpenAPI document: 0.1.0
    Contact: git@omikron.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from kraken_sdk.models.manual_service_certainty import ManualServiceCertainty
from kraken_sdk.models.simple_user import SimpleUser
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ManualInsertOneOf3(BaseModel):
    """
    A manually inserted service
    """ # noqa: E501
    name: StrictStr = Field(description="The inserted service")
    version: Optional[StrictStr] = Field(default=None, description="The service's version")
    certainty: ManualServiceCertainty
    port: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The service's port")
    host: StrictStr = Field(description="The host's ip address")
    user: SimpleUser
    workspace: StrictStr = Field(description="The workspace the service was inserted to")
    created_at: datetime = Field(description="The point in time, the service was inserted")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["name", "version", "certainty", "port", "host", "user", "workspace", "created_at", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Service'):
            raise ValueError("must be one of enum values ('Service')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ManualInsertOneOf3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ManualInsertOneOf3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "version": obj.get("version"),
            "certainty": obj.get("certainty"),
            "port": obj.get("port"),
            "host": obj.get("host"),
            "user": SimpleUser.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "workspace": obj.get("workspace"),
            "created_at": obj.get("created_at"),
            "type": obj.get("type")
        })
        return _obj


